#Sat Sep 01 17:08:48 PDT 2012
cmdhistory=[";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\sample\\\\interpret-ants.clj" ";; Switching to fungp.sample.interpret-ants namespace" "(clojure.core/in-ns 'fungp.sample.interpret-ants)" "(test-ants 5 5)" "(test-ants 15 15)" ";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\sample\\\\compile_ants.clj" ";; Switching to fungp.sample.compile-ants namespace" "(clojure.core/in-ns 'fungp.sample.compile-ants)" "(test-compile-ants 3 3)" ";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\sample\\\\compile_ants.clj" "(test-compile-ants 3 3)" "(test-compile-ants 1 1)" ";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\sample\\\\compile_ants.clj" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 5)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 5)" ";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\sample\\\\compile_ants.clj" ";; Switching to fungp.sample.compile-ants namespace" "(clojure.core/in-ns 'fungp.sample.compile-ants)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'clojure.stacktrace)" "(print-stack-trace *e 15)" "(use 'clojure.stacktrace)" "(test-compile-ants 1 1)" "(print-stack-trace *e 15)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(print-stack-trace *e 15)" "(use 'fungp.sample.compile-ants \:reload-all)" "(print-stack-trace *e 15)" "(test-compile-ants 1 1)" "(test-compile-ants 1 5)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 5)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 2)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 2)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 5)" "(test-compile-ants 5 10)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(use 'fungp.sample.compile-ants \:reload-all)" "(test-compile-ants 1 1)" "(test-compile-ants 2 2)" "(test-compile-ants 5 5)" ";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\sample\\\\sinbowl.clj" "(test-sinbowl 5 5)" "(use 'fungp.sample.sinbowl)" "(test-sinbowl 5 5)" "(use 'fungp.sample.sinbowl \:reload-all)" "(test-sinbowl 5 5)" "(use 'fungp.sample.sinbowl \:reload-all)" "(test-sinbowl 5 5)" "(test-sinbowl 15 15)" ";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\core.clj" "(doc elitism)" "(doc run-genetic-programming)" "(doc 'run-genetic-programming)" "(doc generations)" "(doc concat)" "(doc fungp.core.generations)" "(use 'fungp.core)" "(doc generations)" "(use 'fungp.sample.cart \:reload-all)" "(test-cart 5 5)" ";; Loading file C\:\\\\Users\\\\mike\\\\Documents\\\\GitHub\\\\fungp\\\\src\\\\fungp\\\\core.clj" ";; Switching to fungp.core namespace" "(clojure.core/in-ns 'fungp.core)" "(use 'fungp.sample.cart \:reload-all)" "(test-cart 1 5)" "(concat '() (list 1 2 3))" "(concat (list 2 3 4) (list 1 2 3))" "(concat (list (list 1 2 3) (list 4 5 6)) (list (list 7 8 9)))" "(concat (list 'a (list 1 2 3) 'b (list 4 5 6)) (list 'c (list 7 8 9)))" "(concat '(a (1 2 3) b (4 5 6)) '(c (7 8 9)))" "(use 'fungp.core \:reload-all)" "(create-module-tree 2 '[Math/PI] '[1 10] '[[+ 2][- 2]] 1 1 1 10 \:grow)" "(create-module-tree 2 '[Math/PI] '[1 10 -1 -10] '[[* 2][+ 2][- 2]] 1 1 1 10 \:grow)" "(let [adf0 (fn [arg0] (+ (* -10 Math/PI) (+ arg0 Math/PI))) adl0 (do-loop (* (+ -1 -10) (+ Math/PI Math/PI)) (* (* -10 -1) (- Math/PI Math/PI)) (- (* 1 Math/PI) (+ Math/PI Math/PI)) (* (+ Math/PI Math/PI) (* -1 10)) 10)] (+ (- Math/PI Math/PI) (+ 1 Math/PI)))" "(do-loop '() '() '() '() 10)" "(gensym 'loop-counter)" "(use 'fungp.util \:reload-all)" "(do-loop '() '() '() '() 10)" "(use 'fungp.util \:reload-all)" "(do-loop '() '() '() '() 10)" "~@a" "`(list ~@Math/PI)" "`(list ~@(quote a))" "`(list ~@(symbol \\"a\\"))" "`(list ~(symbol \\"a\\"))" "(use 'fungp.util \:reload-all)" "(do-loop '() '() '() '() 10)" "(do-loop '() '(+ 1 2) '() '() 10)" "(do-loop (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2) 10)" "(use 'fungp.util \:reload-all)" "(do-loop (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2) 10)" "(macroexpand (do-loop (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2) 10))" "(macroexpand-l (do-loop (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2) 10))" "(macroexpand-1 (do-loop (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2) 10))" "(macroexpand '(do-loop (+ 1 2) (+ 1 2) (+ 1 2) (+ 1 2) 10))" "(use 'fungp.sample.cart \:reload-all)" "(test-cart 1 3)" "(use 'fungp.sample.cart \:reload-all)" "(test-cart 1 3)"]
eclipse.preferences.version=1
