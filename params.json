{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"fungp","google":"","body":"This is the README for **fungp,** the genetic programming library I am working on as a student at [CSUS](http://csus.edu).\r\n\r\nIf you're reading this as HTML, it was automatically generated from the README.md file in the root of the [source repository](https://github.com/probabilityZero/fungp).\r\n\r\nAbout this program\r\n------------------\r\n\r\n**fungp** is a genetic programming library implemented in the Clojure programming language. It's pronounced\r\nfun-gee-pee, for *functional genetic programming*.\r\n\r\nA far more detailed explanation can be found in the core.clj source code. It is thoroughly documented. An\r\nHTML document generated from the source is in the ```docs/``` folder, and is available hosted on my school's\r\nweb server [here](http://gaia.ecs.csus.edu/~vollmerm/gp/uberdoc.html). It's a good place to start and it includes a\r\ngetting started tutoral (the source of which is of course available under src/fungp).\r\n\r\nHow do I set it up?\r\n-------------------\r\n\r\nYou'll need Clojure first, but that's easy. You can be up and running in seconds if you already have Java installed.\r\n\r\n[First you install Leiningen.](https://github.com/technomancy/leiningen#installation) This is how you'd do that in a Unix-like system.\r\n\r\n```\r\nmkdir ~/bin\r\nwget https://raw.github.com/technomancy/leiningen/preview/bin/lein\r\nmv lein ~/bin\r\nchmod 755 ~/bin/lein\r\nlein\r\n```\r\n\r\nThis assumes ```~/bin``` is on your ```$PATH```. The lein executable could go anywhere as long as it's on your path, but I'd recommend you put it somewhere in your user's home directory. Use ```echo $PATH``` to see what directories are on your path, or read [this article](http://www.cs.purdue.edu/homes/cs348/unix_path.html) to learn how to edit Unix environment variables.\r\n\r\nBecause you don't need root/sudo access to do this, it works fine on limited user accounts. To my friends at CSUS, that means it runs fine on Athena.\r\n\r\nOnce you have Clojure and Lein running you can grab fungp:\r\n\r\n```\r\ngit clone https://github.com/probabilityZero/fungp.git\r\ncd fungp\r\n```\r\n\r\nHow do I use it?\r\n----------------\r\n\r\nSee the samples for example usage (located in src/fungp/samples). The general idea is to pass in a fitness function, a terminal set, a function set, and other various options, and the algorithm will attempt to evolve code out of\r\nthe functions and terminals.\r\n\r\nThe **run-genetic-programming** function accepts the following options keywords:\r\n\r\n * iterations : number of iterations *between migrations*\r\n * migrations : number of migrations\r\n * num-islands : number of islands\r\n * population-size : size of the populations\r\n * tournament-size : size of the tournaments\r\n * mutation-probability : probability of mutation\r\n * mutation-depth : depth of mutated trees\r\n * max-depth : maximum depth of trees\r\n * terminals : terminals used in tree building\r\n * numbers : number literals to be used in tree building\r\n * functions : functions used in tree building, in the form [function arity]\r\n * adf-count : Number of automatically-defined functions\r\n * adf-arity : Number of arguments for automatically-defined functions\r\n * fitness : a fitness function that takes a tree and returns an error number, lower is better\r\n * report : a reporting function passed [best-tree best-fit] at each migration\r\n\r\nSome minimal knowledge of Clojure is probably necessary to use this library well. There is an experimental (undocumented and untested) Java API, and a file demonstrating its use, but right now I wouldn't recommend that route. Clojure is a rather nice language, with excellent documentation and many great tutorials (like [this one](http://java.ociweb.com/mark/clojure/article.html)).\r\n\r\nWhat does it do?\r\n----------------\r\n\r\nBasically, fungp uses a process of evolution (mimicing natural selection in nature) to create and rewrite\r\nClojure code. Again, for a complete explanation look to fungp.core, or read [Wikipedia's explanation of \r\nGenetic Programming](http://en.wikipedia.org/wiki/Genetic_programming).\r\n\r\nHere's a sample output from a symbolic regression problem. Reports are printed to the screen periodically, \r\nnot every generation.\r\n\r\n```\r\nfungp :: Functional Genetic Programming in Clojure\r\nMike Vollmer, 2012\r\nTest inputs: (-10 -8 -6 -4 -2 0 2 4 6 8)\r\nTest outputs: (300.0 192.0 108.0 48.0 12.0 0.0 12.0 48.0 108.0 192.0)\r\n\r\n(fn\r\n [a]\r\n (let\r\n  []\r\n  (-\r\n   (+\r\n    (- (inc (inc 9.0)) (fungp.util/sdiv (dec a) (* a 0.0)))\r\n    (+ (- (fungp.util/abs a) (- a a)) (inc (* a a))))\r\n   (dec (* (- (dec a) (inc a)) (+ (+ a 7.0) (* a a)))))))\r\n\r\nError:\t10210.0\r\n\r\n(fn\r\n [a]\r\n (let\r\n  []\r\n  (+\r\n   (- (inc (inc 9.0)) (fungp.util/sdiv (dec a) (* a 0.0)))\r\n   (+\r\n    (+\r\n     (inc (fungp.util/abs a))\r\n     (+\r\n      (+\r\n       (- (inc (inc 9.0)) (fungp.util/sdiv (dec a) (* a 0.0)))\r\n       (+ (- (fungp.util/abs a) (- a a)) (inc (* a a))))\r\n      (fungp.util/abs\r\n       (fungp.util/sdiv (fungp.util/abs 8.0) (dec 3.0)))))\r\n    (inc (* a a))))))\r\n\r\nError:\t6778.0\r\n\r\n(fn\r\n [a]\r\n (let\r\n  []\r\n  (+\r\n   (* a a)\r\n   (+ (+ (- (fungp.util/abs a) (- a a)) (inc (* a a))) (inc (* a a))))))\r\n\r\nError:\t580.0\r\n\r\n(fn [a] (let [] (+ (* a a) (+ (* a a) (inc (* a a))))))\r\n\r\nError:\t10.0\r\n\r\nDone!\r\n(fn [a] (let [] (+ (* a a) (+ (* a a) (* a a)))))\r\n\r\nError:\t0.0\r\n```\r\n\r\nLinks and References\r\n--------------------\r\n\r\n * [Koza's GP Website](http://www.genetic-programming.org/)\r\n * [Dr. Gordon's Website at CSUS](http://gaia.ecs.csus.edu/~gordonvs/)\r\n * [A Field Guide to Genetic Programming](http://www.gp-field-guide.org.uk/)\r\n\r\nLicense\r\n-------\r\n\r\nProject created by Mike Vollmer and released under GPL. See the LICENCE file distributed with this code.\r\n","tagline":"A genetic programming library for Clojure"}